type Todo @model {
  id: ID!
  name: String!
  description: String
}

input CreateDiscourseInput {
  discourse_id: Int!
  content: String
  source_id: Int
  region: String
  created_time: AWSTimestamp
  imported_time: AWSTimestamp
  secondary_content: String
  isPost: Int
  post_id: Int
}

type Discourse {
  discourse_id: Int!
  content: String
  source_id: Int
  region: String
  created_time: AWSTimestamp
  imported_time: AWSTimestamp
  secondary_content: String
  isPost: Int
  post_id: Int
}

input UpdateDiscourseInput {
  discourse_id: Int!
  content: String
  source_id: Int
  region: String
  created_time: AWSTimestamp
  imported_time: AWSTimestamp
  secondary_content: String
  isPost: Int
  post_id: Int
}

input CreateImpactAreaInput {
  impact_area_id: Int!
  tag: String
  source_parent_id: Int
  impact_parent_id: Int
  source_ontology: String
}

type ImpactArea {
  impact_area_id: Int!
  tag: String
  source_parent_id: Int
  impact_parent_id: Int
  source_ontology: String
}

input UpdateImpactAreaInput {
  impact_area_id: Int!
  tag: String
  source_parent_id: Int
  impact_parent_id: Int
  source_ontology: String
}

input CreateModelVersionInput {
  model_id: Int!
  model_task: String
  created_time: AWSTimestamp
}

type ModelVersion {
  model_id: Int!
  model_task: String
  created_time: AWSTimestamp
}

input UpdateModelVersionInput {
  model_id: Int!
  model_task: String
  created_time: AWSTimestamp
}

input CreatePlatformInput {
  platform_id: Int!
  platform_desc: String
  platform_type: String
}

type Platform {
  platform_id: Int!
  platform_desc: String
  platform_type: String
}

input UpdatePlatformInput {
  platform_id: Int!
  platform_desc: String
  platform_type: String
}

input CreateSourceInput {
  source_id: Int!
  platform_id: Int
  source_desc: String
  is_survey: Int
}

type Source {
  source_id: Int!
  platform_id: Int
  source_desc: String
  is_survey: Int
}

input UpdateSourceInput {
  source_id: Int!
  platform_id: Int
  source_desc: String
  is_survey: Int
}

type Mutation {
  deleteDiscourse(discourse_id: Int!): Discourse
  createDiscourse(createDiscourseInput: CreateDiscourseInput!): Discourse
  updateDiscourse(updateDiscourseInput: UpdateDiscourseInput!): Discourse
  deleteImpactArea(impact_area_id: Int!): ImpactArea
  createImpactArea(createImpactAreaInput: CreateImpactAreaInput!): ImpactArea
  updateImpactArea(updateImpactAreaInput: UpdateImpactAreaInput!): ImpactArea
  deleteModelVersion(model_id: Int!): ModelVersion
  createModelVersion(createModelVersionInput: CreateModelVersionInput!): ModelVersion
  updateModelVersion(updateModelVersionInput: UpdateModelVersionInput!): ModelVersion
  deletePlatform(platform_id: Int!): Platform
  createPlatform(createPlatformInput: CreatePlatformInput!): Platform
  updatePlatform(updatePlatformInput: UpdatePlatformInput!): Platform
  deleteSource(source_id: Int!): Source
  createSource(createSourceInput: CreateSourceInput!): Source
  updateSource(updateSourceInput: UpdateSourceInput!): Source
}

type Query {
  getDiscourse(discourse_id: Int!): Discourse
  listDiscourses: [Discourse]
  getImpactArea(impact_area_id: Int!): ImpactArea
  listImpactAreas: [ImpactArea]
  getModelVersion(model_id: Int!): ModelVersion
  listModelVersions: [ModelVersion]
  getPlatform(platform_id: Int!): Platform
  listPlatforms: [Platform]
  getSource(source_id: Int!): Source
  listSources: [Source]
}

type Subscription {
  onCreateDiscourse: Discourse @aws_subscribe(mutations: ["createDiscourse"])
  onCreateImpactArea: ImpactArea @aws_subscribe(mutations: ["createImpactArea"])
  onCreateModelVersion: ModelVersion @aws_subscribe(mutations: ["createModelVersion"])
  onCreatePlatform: Platform @aws_subscribe(mutations: ["createPlatform"])
  onCreateSource: Source @aws_subscribe(mutations: ["createSource"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
