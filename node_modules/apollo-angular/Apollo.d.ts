import { NgZone } from '@angular/core';
import { ApolloClient, QueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions, ApolloClientOptions } from 'apollo-client';
import { FetchResult } from 'apollo-link';
import { Observable } from 'rxjs';
import { QueryRef } from './QueryRef';
import { WatchQueryOptions, ExtraSubscriptionOptions, R, NamedOptions } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class ApolloBase<TCacheShape = any> {
    protected ngZone: NgZone;
    protected _client?: ApolloClient<TCacheShape>;
    constructor(ngZone: NgZone, _client?: ApolloClient<TCacheShape>);
    watchQuery<T, V = R>(options: WatchQueryOptions<V>): QueryRef<T, V>;
    query<T, V = R>(options: QueryOptions<V>): Observable<ApolloQueryResult<T>>;
    mutate<T, V = R>(options: MutationOptions<T, V>): Observable<FetchResult<T>>;
    subscribe<T, V = R>(options: SubscriptionOptions<V>, extra?: ExtraSubscriptionOptions): Observable<FetchResult<T>>;
    /**
     * Get an access to an instance of ApolloClient
     */
    getClient(): ApolloClient<TCacheShape>;
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    setClient(client: ApolloClient<TCacheShape>): void;
    private readonly client;
    private beforeEach;
    private checkInstance;
}
export declare class Apollo extends ApolloBase<any> {
    private _ngZone;
    private map;
    constructor(_ngZone: NgZone, apolloOptions?: ApolloClientOptions<any>, apolloNamedOptions?: NamedOptions);
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    create<TCacheShape>(options: ApolloClientOptions<TCacheShape>, name?: string): void;
    /**
     * Use a default ApolloClient
     */
    default(): ApolloBase<any>;
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    use(name: string): ApolloBase<any>;
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    createDefault<TCacheShape>(options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    createNamed<TCacheShape>(name: string, options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    removeClient(name?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Apollo>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Apollo>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvLmQudHMiLCJzb3VyY2VzIjpbIkFwb2xsby5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBvbGxvQ2xpZW50LCBRdWVyeU9wdGlvbnMsIE11dGF0aW9uT3B0aW9ucywgQXBvbGxvUXVlcnlSZXN1bHQsIFN1YnNjcmlwdGlvbk9wdGlvbnMsIEFwb2xsb0NsaWVudE9wdGlvbnMgfSBmcm9tICdhcG9sbG8tY2xpZW50JztcbmltcG9ydCB7IEZldGNoUmVzdWx0IH0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUXVlcnlSZWYgfSBmcm9tICcuL1F1ZXJ5UmVmJztcbmltcG9ydCB7IFdhdGNoUXVlcnlPcHRpb25zLCBFeHRyYVN1YnNjcmlwdGlvbk9wdGlvbnMsIFIsIE5hbWVkT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXBvbGxvQmFzZTxUQ2FjaGVTaGFwZSA9IGFueT4ge1xuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgX2NsaWVudD86IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT47XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIF9jbGllbnQ/OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTtcbiAgICB3YXRjaFF1ZXJ5PFQsIFYgPSBSPihvcHRpb25zOiBXYXRjaFF1ZXJ5T3B0aW9uczxWPik6IFF1ZXJ5UmVmPFQsIFY+O1xuICAgIHF1ZXJ5PFQsIFYgPSBSPihvcHRpb25zOiBRdWVyeU9wdGlvbnM8Vj4pOiBPYnNlcnZhYmxlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PjtcbiAgICBtdXRhdGU8VCwgViA9IFI+KG9wdGlvbnM6IE11dGF0aW9uT3B0aW9uczxULCBWPik6IE9ic2VydmFibGU8RmV0Y2hSZXN1bHQ8VD4+O1xuICAgIHN1YnNjcmliZTxULCBWID0gUj4ob3B0aW9uczogU3Vic2NyaXB0aW9uT3B0aW9uczxWPiwgZXh0cmE/OiBFeHRyYVN1YnNjcmlwdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYWNjZXNzIHRvIGFuIGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqL1xuICAgIGdldENsaWVudCgpOiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+O1xuICAgIC8qKlxuICAgICAqIFNldCBhIG5ldyBpbnN0YW5jZSBvZiBBcG9sbG9DbGllbnRcbiAgICAgKiBSZW1lbWJlciB0byBjbGVhbiB1cCB0aGUgc3RvcmUgYmVmb3JlIHNldHRpbmcgYSBuZXcgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsaWVudCBBcG9sbG9DbGllbnQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZXRDbGllbnQoY2xpZW50OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudDtcbiAgICBwcml2YXRlIGJlZm9yZUVhY2g7XG4gICAgcHJpdmF0ZSBjaGVja0luc3RhbmNlO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXBvbGxvIGV4dGVuZHMgQXBvbGxvQmFzZTxhbnk+IHtcbiAgICBwcml2YXRlIF9uZ1pvbmU7XG4gICAgcHJpdmF0ZSBtYXA7XG4gICAgY29uc3RydWN0b3IoX25nWm9uZTogTmdab25lLCBhcG9sbG9PcHRpb25zPzogQXBvbGxvQ2xpZW50T3B0aW9uczxhbnk+LCBhcG9sbG9OYW1lZE9wdGlvbnM/OiBOYW1lZE9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBcG9sbG9DbGllbnRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHJlcXVpcmVkIHRvIGNyZWF0ZSBBcG9sbG9DbGllbnRcbiAgICAgKiBAcGFyYW0gbmFtZSBjbGllbnQncyBuYW1lXG4gICAgICovXG4gICAgY3JlYXRlPFRDYWNoZVNoYXBlPihvcHRpb25zOiBBcG9sbG9DbGllbnRPcHRpb25zPFRDYWNoZVNoYXBlPiwgbmFtZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNlIGEgZGVmYXVsdCBBcG9sbG9DbGllbnRcbiAgICAgKi9cbiAgICBkZWZhdWx0KCk6IEFwb2xsb0Jhc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVc2UgYSBuYW1lZCBBcG9sbG9DbGllbnRcbiAgICAgKiBAcGFyYW0gbmFtZSBjbGllbnQncyBuYW1lXG4gICAgICovXG4gICAgdXNlKG5hbWU6IHN0cmluZyk6IEFwb2xsb0Jhc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkZWZhdWx0IEFwb2xsb0NsaWVudCwgc2FtZSBhcyBgYXBvbGxvLmNyZWF0ZShvcHRpb25zKWBcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBcG9sbG9DbGllbnQncyBvcHRpb25zXG4gICAgICovXG4gICAgY3JlYXRlRGVmYXVsdDxUQ2FjaGVTaGFwZT4ob3B0aW9uczogQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5hbWVkIEFwb2xsb0NsaWVudCwgc2FtZSBhcyBgYXBvbGxvLmNyZWF0ZShvcHRpb25zLCBuYW1lKWBcbiAgICAgKiBAcGFyYW0gbmFtZSBjbGllbnQncyBuYW1lXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQXBvbGxvQ2xpZW50J3Mgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZU5hbWVkPFRDYWNoZVNoYXBlPihuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEFwb2xsb0NsaWVudE9wdGlvbnM8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1lbWJlciB0byBjbGVhbiB1cCB0aGUgc3RvcmUgYmVmb3JlIHJlbW92aW5nIGEgY2xpZW50XG4gICAgICogQHBhcmFtIG5hbWUgY2xpZW50J3MgbmFtZVxuICAgICAqL1xuICAgIHJlbW92ZUNsaWVudChuYW1lPzogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==