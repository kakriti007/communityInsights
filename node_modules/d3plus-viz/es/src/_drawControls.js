import { elem } from "d3plus-common";
import { saveElement } from "d3plus-export";
import { Button, Radio, Select } from "d3plus-form";
var formTypes = {
  Button: Button,
  Radio: Radio,
  Select: Select
};
/**
    @function _drawLegend
    @desc Renders the legend if this._legend is not falsy.
    @param {Array} dara The filtered data array to be displayed.
    @private
*/

export default function () {
  var _this = this;

  var that = this;
  var padding = this._controlPadding() ? this._padding : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
  var areas = ["left", "right", "top", "bottom"];

  var _loop = function _loop(a) {
    var area = areas[a];
    var controls = (_this._controls || []).filter(function (c) {
      return !c.position && area === "bottom" || c.position === area;
    });

    if (_this._downloadButton && _this._downloadPosition === area) {
      controls.push({
        data: [{
          text: _this._translate("Download"),
          value: 1
        }],
        label: "downloadButton",
        on: {
          click: function click() {
            var resize = _this._detectResize;
            if (resize) _this.detectResize(false).render();
            saveElement(_this._select.node(), Object.assign({
              title: _this._title || undefined
            }, _this._downloadConfig), {
              callback: function callback() {
                setTimeout(function () {
                  if (resize) _this.detectResize(resize).render();
                }, 5000);
              }
            });
          }
        },
        type: "Button"
      });
    }

    var wide = area === "top" || area === "bottom";
    var transform = {
      height: wide ? _this._height - (_this._margin.top + _this._margin.bottom) : _this._height - (_this._margin.top + _this._margin.bottom + padding.top + padding.bottom),
      width: wide ? _this._width - (_this._margin.left + _this._margin.right + padding.left + padding.right) : _this._width - (_this._margin.left + _this._margin.right)
    };
    transform.x = (wide ? _this._margin.left + padding.left : _this._margin.left) + (area === "right" ? _this._width - _this._margin.bottom : 0);
    transform.y = (wide ? _this._margin.top : _this._margin.top + padding.top) + (area === "bottom" ? _this._height - _this._margin.bottom : 0);
    var foreign = elem("foreignObject.d3plus-viz-controls-".concat(area), {
      condition: controls.length,
      enter: Object.assign({
        opacity: 0
      }, transform),
      exit: Object.assign({
        opacity: 0
      }, transform),
      parent: _this._select,
      transition: _this._transition,
      update: {
        height: transform.height,
        opacity: 1,
        width: transform.width
      }
    });
    var container = foreign.selectAll("div.d3plus-viz-controls-container").data([null]);
    container = container.enter().append("xhtml:div").attr("class", "d3plus-viz-controls-container").merge(container);

    if (controls.length) {
      var _loop2 = function _loop2(i) {
        var control = Object.assign({}, controls[i]);
        var on = {};

        if (control.on) {
          var _loop3 = function _loop3(event) {
            if ({}.hasOwnProperty.call(control.on, event)) {
              on[event] = function () {
                control.on[event].bind(that)(this.value);
              };
            }
          };

          for (var event in control.on) {
            _loop3(event);
          }
        }

        var id = control.label || "".concat(area, "-").concat(i);

        if (!_this._controlCache[id]) {
          var type = control.type && formTypes[control.type] ? control.type : "Select";
          _this._controlCache[id] = new formTypes[type]().container(container.node());
          if (control.checked) _this._controlCache[id].checked(control.checked);
          if (control.selected) _this._controlCache[id].selected(control.selected);
        }

        delete control.checked;
        delete control.selected;

        _this._controlCache[id].config(control).config({
          on: on
        }).config(_this._controlConfig).render();
      };

      for (var i = 0; i < controls.length; i++) {
        _loop2(i);
      }

      container.style("display", ["top", "bottom"].includes(area) ? "block" : "inline-block").style("text-align", ["top", "bottom"].includes(area) ? "center" : area);
      var bounds = container.node().getBoundingClientRect();
      foreign.transition(_this._transition).attr("x", transform.x - (area === "right" ? bounds.width : 0)).attr("y", transform.y - (area === "bottom" ? bounds.height : 0)).attr("height", wide ? bounds.height : transform.height).attr("width", wide ? transform.width : bounds.width);
      _this._margin[area] += ["top", "bottom"].includes(area) ? bounds.height : bounds.width;
    }
  };

  for (var a = 0; a < areas.length; a++) {
    _loop(a);
  }
}